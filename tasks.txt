ES6
    [ ] modularize the code (do genRandom first)
    [ ] static properties on class, redo these: MapRoomConstantsClass, ModelLimbConstantsClass, ModelConstantsClass (search all constants)

When interface created
    [ ] close gl
    [ ] all the object release()

WebGL2
    [ ] vertex array objects (liquids, models, map)
           https://webgl2fundamentals.org/webgl/lessons/webgl1-to-webgl2.html
           (reason can't do for now, it forces mesh shader setup to be per VAO, and that means repeated lights, etc.)
    [ ] uniform buffers for lights & matrixes




ToDos

[DECORATIONS]
    * random rects
        [X] mapRoomConstants.ROOM_DECORATION_PILLARS:
        [X] mapRoomConstants.ROOM_DECORATION_STORAGE:
        [X] mapRoomConstants.ROOM_DECORATION_COMPUTER:
        [ ] mapRoomConstants.ROOM_DECORATION_PIPE:
        [X] mapRoomConstants.ROOM_DECORATION_CUBICAL:
        [ ] mapRoomConstants.ROOM_DECORATION_LAB:
              - corner pipes
              - need pipe ends
        > pits (wires, pipes)
    * remove decoration type from room class
    * types for low/high/water rooms
    * special edge ones (panels, conduits)
    * animated decorative items

--> models cast light
--> models get hunch as part of body skeleton, not variable



#### monsters still getting hit by own projectiles
#### need meeles for monsters
#### stairs need quads or blocks at top
#### ai types (charge, sniper, etc)
#### office decorations (outside like computers)
#### lifts instead of platforms in lower levels
#### windows have different bar types
#### only put closets in areas that have platforms to them?
#### platforms not knocking out main map mesh walls?
#### item texture is pretty ugly
#### collisions against slanted walls are bad
#### weapon models
#### get rid of weapon fire hard-coding
#### liquid tint colors are hard-coded
#### draw closest map meshes first
