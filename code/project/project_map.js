/**
 * @module ProjectMapClass
 * @ignore
*/

import ImportMapClass from '../import/import_map.js';
import GenerateMapClass from '../generate/map/generate_map.js';

/**
 * The main map class.  All your map scripts must extend
 * from this class.
 * 
 * @hideconstructor
 */
export default class ProjectMapClass
{
    constructor(core)
    {
        this.core=core;
    }
    
        //
        // initialize and release
        //
        
    initialize()
    {
    }
    
    release()
    {
    }
    
    /**
     * Gets the project setup object, which contains all the
     * information on how the user setup this game (for instance,
     * things like mouse speed, etc.)
     * 
     * @returns {SetupClass} The setup object
     */    
    getSetup()
    {
        return(this.core.setup);
    }
    
    /**
     * Gets the projects camera class, which you can use to
     * change the camera.
     * 
     * @returns {CameraClass} The camera
     */
    getCamera()
    {
        return(this.core.camera);
    }
    
        //
        // main map loader
        //
    
    async loadMap()
    {
        let importSettings=this.getImportSettings();
        let importMap,generateMap;
        
            // regular glTF map
            
        if (importSettings.autoGenerate===undefined) {
            importMap=new ImportMapClass(this.core);
            return(await importMap.load(importSettings));
        }
        
            // autogenerated map
            
        generateMap=new GenerateMapClass(this.core);
        return(generateMap.build(importSettings));
    }
    
    /**
     * Adds an entity to this map, should only be called when
     * the system calls the ready() method.
     * 
     * @param {class} entityClass Class of entity to spawn
     * @param {string} name Name of entity
     * @param {PointClass} position Position of entity
     * @param {PointClass} angle Angle of entity
     * @param {object} data Additional user data for entity
     * @param {boolean} show TRUE if entity is not hidden
     */
    addEntity(entityClass,name,position,angle,data,show)
    {
        let entity;
        
        entity=new entityClass(this.core,name,position,angle,data);
        entity.show=show;
        
        this.core.map.entityList.add(entity);
        
        return(entity);
    }
    
    /*
     * Override this to pass in the map JSON import
     * settings.
     * 
     * @returns {object} Map setup object
     */
    getImportSettings()
    {
        return(null);
    }
    
    /**
     * Override this to finish anything that needs to be setup
     * in the map after it has been completely loaded.
     */
    ready()
    {
    }
}
